package ejer1;

/*6 puntos
 * Implementa el siguiente programa:
 * 
 * clase Almacen: la clase almacen contiene una lista llamada almacenPrincipal  que representa 
 * un almacen donde llegan unos números enteros positivos (estrictamente >0). Puede contener máximo N enteros. 
 * Además tiene otras dos listas,llamadas pares e impares, 
 * donde se almacenarán números pares e impares como explicado más adelante.
 * 
 * clase Prod: hay una sola instancia de la clase Prod. 
 * Representa un thread productor que normalmente duerme. 
 * Si el almacenPrincipal está a menos del 30% de su capacidad máxima N, el productor se despertará 
 * y producirá nuevos números llamando el método "produce" proporcionado por el profesor e irá 
 * almacenando los números en el almacenPrincipal.En el almacenPrincipal se irán reponiendo 
 * números hasta que el almacenPrincipal se llene al 90%. 
 * A ese punto el productor volverá a dormir.
 * NOTA: mientras el productor produce, los clasificadores siguien trabajando si pueden.
 * 
 * clase Clasificador: hay X instancias de clasificadores. Representa un thread clasificador que pilla un número 
 * del almacenPrincipal, ejecuta el método "clasifica" proporcionado por el profesor, 
 * y luego almacena el número en el array correcto (pares o impares).
 * 
 * clase Cons: hay C instancias de Cons. Cada Cons, aleatoriamente, decide si consumir un par o un impar. Accederá al array 
 * correspondiente, pillará un número y ejecutará el método "consumir" proporcionado por el profesor. 
 * Repetirán esto comportamiento indefinitamente. Si no hay números en el array, se quedarán a la espera de que haya.
 * 
 * 
 * CAMBIOS!
 * 
 * El acceso a la variable almacenPrincipal la tengo que sincronizar sólo para el Prod y los Clasificador, pero los Cons puede acceder a 
 * 	a Almacen para acceder a las otras listas de números. Por otro lado a Prod no le afecta que Clasificador y Cons estén leyendo y escribiendo
 *  en los recursos pares e impares. Por ello necesito un monitor común para:
 * 		- Prod y Clasificador -> sincroniza el acceso a almacén principal
 * 		- Clasificador y Cons -> sincroniza el acceso a pares e impares
 *
 * 
 * CAMBIO 1 : Creo el Objeto llamado monitor1 que usaré como monitor entre Pro y Clasificador. Lo añado al constructor de ambos Prod y Clasificador y en el main
 * 			  Creo el Objeto llamado monitor2 que usaré como monitor entre Clasificador y Cons. Lo añado al constructor de ambos Clasificador y Cons y en el main
 * CAMBIO 2 : Añado al constructor de todos el Objeto Almacen, que será un recurso compartido para todos
 * 
 * PARTE 1 -> sincronía entre Prod y Clasificador y entre Clasificadores
 * CAMBIO 3 : Añado la operación atómica sobre monitor1 en el run() de Prod
 * CAMBIO 4 : Añado syncronized en los métodos insertaAlmacenPrincipal y extraeAlmacenPrincipal de Almacen porque tiene que ser ThreadSafe y Prod y Clasificador quieren acceder
 * CAMBIO 5 : Sincronizo sobre el monitor 1 la extracción del almacen principal en Clasificador
 * CAMBIO 6 : despierto al productor desde el Clasificador (podría comprobar primero si el producto principal ha caído por debajo del 30% pero no me incomoda despertar al Prod cada vez que se extrae un número (y espero que a ti tampoco Stefano xD))
 * 
 * PARTE 2 -> sincronía entre Clasificador y Cons y entre Clasificadores
 * CAMBIO 7 : creo los Objetos monitorPares y monitorImpares para sincronizar la entrada y salida de datos en las variables pares e impares de almacén
 * 
 * */
public class Main {

	static final int N = 10;// tamaño de los arrays de Almacen
	static final int X = 2;// numero de Clasificadores
	static final int C = 4;// numero de Cons

	public static void main(String[] args) {
		
		Almacen almacen = new Almacen(N);
		
		Object monitor1 = new Object();
		Object monitor2 = new Object();
		Object monitorPares = new Object();
		Object monitorImpares = new Object();
		

		// lanza un Prod
		new Thread(new Prod(almacen, monitor1)).start();

		// lanza X Clasificador
		for (int i = 0; i < X; i++) {
			new Thread(new Clasificador(almacen, monitor1, monitor2, monitorPares, monitorImpares)).start();
		}

		// lanza C Consumidores, la mitad consume pares, la mitad consume impares
		for (int i = 0; i < C; i++) {
			new Thread(new Cons(almacen, monitor2, i % 2 == 0, monitorPares, monitorImpares)).start();
		}

	}

}